Conventions and Standards for programming in ADE

The following states some conventions and standards that one can expect and
to which one should adhere when programming for ADE.


Debugging flags:
================

All ADE servers have an integer debugging value, used to enable and regulate
operational output to the console*. The conventions used for the debugging
verbosity are as follows:

0:   no console output information shown
1-3: reserved for custom server implementation
4-6: increasingly verbose information generated by the ADE infrastructure
     occuring during non-periodic operations
7-9: increasingly verbose information generated by the ADE infrastructure
     occurring during periodic operations
10+: not used by the ADE system (can be used without interference)

*: While it is not currently implemented, the display of debugging in the
graphical display is planned. Also note that these conventions were not
instituted until well after a large code base existed, so there may be
code that violates them.



Units of measurement:
=====================

The standard ISO units (meters, seconds, radians, etc.) are used within
ADEServers, with the exception of some thread-related functionality (e.g.,
sleep times), which are in milliseconds. The front of the robot is always
signified as 0 degrees; angles range between -PI and PI, decreasing in the
clock-wise direction and increasing in the counter-clockwise direction
(e.g., right is -PI/2 and left is PI/2).

Because radians are difficult for most people to use as an angle measurement,
it is often beneficial to supply methods that use degrees. To signify that
a method uses degrees, the method name will be the same as the one that uses
radians, but the letters "Deg" appears in the method name. For instance,
two methods that turn the robot are:

public void turn(double rads) {...}     // uses radians
public void turnDeg(double degs) {...}  // uses degrees

Due to rounding error and consistency, it is recommended that degrees are
only used for user input or display purposes.



Command-line switches/flags:
============================

Each ADEServer implements a set of switches that control certain elements
of its operation. As of 02/09/2007, these are as follows:

     -h -H --help           <display command line switches / options>
     -v -V --vmargs         <<args> Java VM arguments (without leading '-'s)>
     -l -L --local          <<IP-address> [port] [name] of this server>
     -r -R --registry       <<IP-address> [port] [name] of registry>
     -f -F --file           <<file> with configuration info for this server>
     -b -B --backupregistry <<IP-address> [port] [name] of backupregistry>
     -e -E --error          <<#> of error restarts for this server>
     -c -C --credentials    <<string> representation of credentials>
     -a -A --access         <<strings> describing access rights to this server>
     -o -O --onlyonhosts    <<IP-address[es]> of host restrictions>
     -d -D                  <<#> level of debugging outputfor this server>
     --devices              <<strings> describing devices this server requires>
     -w -W --noclientwait   <do not wait for clients before entering RUN state>
     -g -G                  <display ADE Gui interface, if available>

In addition, any individual ADEServer may implement additional switches by
overriding the "protected boolean parseadditionalargs(String[] args)" method
and adding appropriate code. Because each ADEServer (1) runs in its own Java
process and (2) calls this method during superclass construction, variables
declared and set within a subclass must be declared both "public" and "static".

Recommendations:
1. Always add correct usage information to the "additionalUsageInfo" method,
   which is automatically called whenever a "-h" or "--help" switch is given.
2. Keep the text of switch descriptions under 80 characters or split it
   into additional lines.
3. Use the "equalsIgnoreCase" method when parsing arguments.
4. For boolean toggles, if the default is "false", the text should reflect what
   the toggle will make "true"; if the default value is "true", append a "no"
   to the front of the text. For instance, an ADEServer that should, by default,
   obtain a reference to a laser would have a switch "--nolaser" to change the
   default behavior. Alternatively, the switch "--laser" might be used to
   obtain a laser reference.


Documentation:
==============

Standard documentation conventions apply (e.g., meaningful variable names,
concise but adequate comments, etc.). ADE relies heavily on the JavaDoc tool
for documentation of code, which makes documentation relatively painless to
do during programming. For information on how to use JavaDoc, see the Sun
JavaDoc homepage at:

http://java.sun.com/j2se/javadoc/

