<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<type>
  <name>entity</name>
  <subtypes>
    <!-- Defining constants -->
    <type>
      <name>constant</name>
      <subtypes>
        <type planner="false">
          <name>m_start</name>
          <ctype>map</ctype>
        </type>
        <type planner="true">
          <name>cmdrx</name>
          <ctype>commander</ctype>
        </type>
        <type planner="true">
          <name>cmdry</name>
          <ctype>commander</ctype>
        </type>
        <type planner="true">
          <name>cmdrz</name>
          <ctype>commander</ctype>
        </type>
      </subtypes>
    </type>
    <!-- End of Defining -->
    <!-- Definiting different objects -->
    <type>
      <name>object</name>
      <subtypes>
	<type planner="false">
	  <name>pseudobject</name>
	  <subtypes>
	    <!-- Definining environment-specific objects --> 
	    <type planner="true">
	      <name>location</name>
	      <api>type</api>
	      <subtypes>
		<type planner="false">
		  <name>map</name>
		  <api>type</api>
		  <subtypes>
		    <type planner="false">
		      <name>tree</name>
		      <api>type</api>
		    </type>
		    <type planner="false">
		      <name>rock</name>
		      <api>type</api>
		   </type>
		   <type planner="false">
		     <name>mountain</name>
		     <api>type</api>
		   </type>
		   <type planner="false">
		     <name>bush</name>
		     <api>type</api>
		    </type>     
		  </subtypes>
		</type>
	      </subtypes>
	    </type>
	    <!-- Definining human-specific items -->
	    <type planner="false">
	      <name>cap</name>
	      <api>type</api>
	    </type>
	    <type planner="true">
	      <name>boot</name>
	      <api>type</api>
	    </type>
	    <type planner="true">
	      <name>human</name>
	      <api>type</api>
	      <subtypes>
		<type planne="false">
		  <name>victim</name>
		  <api>type</api>
		</type>
	      </subtypes>
	    </type> 
	    <!-- Definining the agent -->
	    <type planner="false">
	      <name>agent</name>
	      <api>type</api>
	      <subtypes>
		<type planner="true">
		  <name>commander</name>
		  <api>type</api>
		</type>
	      </subtypes>
	    </type>
	  </subtypes>
	</type>
      </subtypes>
    </type>
    <!-- Definiting of states -->
    <type>
      <name>state</name>
      <subtypes>
	<type planner="false">
	  <name>at(cmdrx,m_start)</name>
	</type>
      </subtypes>
    </type>
    <!-- Defining goals -->
    <type>
      <name>goal</name>
      <subtypes>
	<type planner="false">
	  <name>at(self,m_start)</name>
	  <hard>true</hard>
          <deadline>1450</deadline>
          <benefit>1000</benefit>
	</type>
      </subtypes>
    </type>
    <!-- Defining actions -->
    <type>
      <name>action</name>
      <subtypes>
        <type>
          <name>primitive</name>
          <subtypes>
            <type>
	      <!-- MOTION PRIMITIVE -->
	      <name>motionPrimitive</name>
	         <subtypes>
		   <type>
		     <!-- Set translational velocity -->
		     <name>setTV</name>
		     <api>set translational velocity</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var desc="translational velocity">
		       <varname>?tv</varname>
		       <vartype>double</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Set rotational velocity -->
		     <name>setRV</name>
		     <api>set rotational velocity</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var desc="rotational velocity">
		       <varname>?rv</varname>
		       <vartype>double</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Set velocities -->
		     <name>setVels</name>
		     <api>set translational and rotational velocities</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var desc="translational velocity">
		       <varname>?tv</varname>
		       <vartype>double</vartype>
		     </var>
		     <var desc="rotational velocity">
		       <varname>?rv</varname>
		       <vartype>double</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Get velocities -->
		     <name>getVels</name>
		     <api>get translational and rotational velocities</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var desc="translational velocity">
		       <varname>?tv</varname>
		       <vartype>double</vartype>
		       <varrole>return</varrole>
		     </var>
		     <var desc="rotational velocity">
		       <varname>?rv</varname>
		       <vartype>double</vartype>
		       <varrole>return</varrole>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Start moving forward -->
		     <name>startmove</name>
		     <desc>?mover moves forward</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?quiet</varname>
		       <vartype>boolean</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Start backing up (!) -->
		     <name>startmoveback</name>
		     <desc>?mover backs up</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?quiet</varname>
		       <vartype>boolean</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Start moving to the left -->
		     <name>startmoveleft</name>
		     <desc>?mover moves to the left</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?quiet</varname>
		       <vartype>boolean</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Start moving to the right -->
		     <name>startmoveright</name>
		     <desc>?mover moves to the right</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?quiet</varname>
		       <vartype>boolean</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Turn left -->
		     <name>startleft</name>
		     <desc>?mover turns left</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?quiet</varname>
		       <vartype>boolean</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Turn right -->
		     <name>startright</name>
		     <desc>?mover turns right</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?quiet</varname>
		       <vartype>boolean</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Stop -->
		     <name>dostop</name>
		     <desc>?mover stops</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?quiet</varname>
		       <vartype>boolean</vartype>
		     </var>
		     <locks>motionLock</locks>
		   </type>
		   <type>
		     <!-- Check whether obstacle avoidance stopped me -->
		     <name>stoppedMe</name>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		   </type>
		   <type>
		     <!-- Check whether there's an obstacle to the right -->
		     <name>safeRight</name>
		     <api>check whether there's an obstacle to the right</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		   </type>
		   <type>
		     <!-- Check whether there's an obstacle to the front -->
		     <name>safeFront</name>
		     <api>check whether there's an obstacle to the front</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		   </type>
		   <type>
		     <!-- Check whether there's an obstacle to the left -->
		     <name>safeLeft</name>
		     <api>check whether there's an obstacle to the left</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		   </type>
		   <type>
		     <!-- Attempt transmission (fails if field -lt threshold) -->
		     <name>doTransmit</name>
		     <desc>?mover attempts transmission</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?threshold</varname>
		       <vartype>fieldStr</vartype>
		     </var>
		     <var>
		       <varname>?fieldStrength</varname>
		       <vartype>fieldStr</vartype>
		       <varrole>return</varrole>
		     </var>
		     <locks>transmitLock</locks>
		   </type>
		   <type>
		     <!-- Get a reading of field strength -->
		     <name>fieldReading</name>
                  <!--
		      <desc>?mover asks for a reading</desc>
                  -->
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?fieldStrength</varname>
                    <vartype>fieldStr</vartype>
                    <varrole>return</varrole>
                  </var>
		   </type>
		   <type>
		     <!-- Get current location -->
		     <name>getLocation</name>
		     <desc>?mover checks current location</desc>
		     <api>get current location</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?xcoord</varname>
		       <vartype>coordinate</vartype>
		       <varrole>return</varrole>
		     </var>
		     <var>
		       <varname>?ycoord</varname>
		       <vartype>coordinate</vartype>
		       <varrole>return</varrole>
		     </var>
		   </type>
		   <type>
		     <!-- Get current heading -->
		     <name>getHeading</name>
		     <desc>?mover checks current heading</desc>
		     <api>get current heading</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?heading</varname>
		       <vartype>double</vartype>
		       <varrole>return</varrole>
		     </var>
		   </type>
		   <type>
		     <!-- Get relative heading between two global headings -->
		     <name>getHeadingTo</name>
		     <desc>?mover calculates relative heading</desc>
		     <api>get relative heading between two global headings</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var desc="current heading">
		       <varname>?t1</varname>
		       <vartype>double</vartype>
		     </var>
		     <var desc="target heading">
		       <varname>?t2</varname>
		       <vartype>double</vartype>
		     </var>
		     <var>
		       <varname>?heading</varname>
		       <vartype>double</vartype>
		       <varrole>return</varrole>
		     </var>
		   </type>
		   <type>
		     <!-- Get global heading from one point to another-->
		     <name>getHeadingFrom</name>
		     <desc>?mover checks heading between two points</desc>
		     <api>get global heading between one point and another</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var desc="current x coordinate">
		       <varname>?x1</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="current y coordinate">
		       <varname>?y1</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="target x coordinate">
		       <varname>?x2</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="target y coordinate">
		       <varname>?y2</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="target heading">
		       <varname>?heading</varname>
		       <vartype>double</vartype>
		       <varrole>return</varrole>
		     </var>
		   </type>
		   <type>
		     <!-- Get relative heading from one point to another-->
		     <name>getHeadingFromRel</name>
		     <desc>?mover checks heading between two points</desc>
		     <api>get relative heading between one point and another</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var desc="current x coordinate">
		       <varname>?x1</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="current y coordinate">
		       <varname>?y1</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="target x coordinate">
		       <varname>?x2</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="target y coordinate">
		       <varname>?y2</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="current heading">
		       <varname>?heading</varname>
		       <vartype>double</vartype>
		     </var>
		     <var desc="target heading">
		       <varname>?newHeading</varname>
		       <vartype>double</vartype>
		       <varrole>return</varrole>
		     </var>
		   </type>
		   <type>
		     <!-- Get distance from one point to another-->
		     <name>getDistanceFrom</name>
		     <desc>?mover checks distance between two points</desc>
		     <api>get distance between one point and another</api>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var desc="current x coordinate">
		       <varname>?x1</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="current y coordinate">
		       <varname>?y1</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="target x coordinate">
		       <varname>?x2</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="target y coordinate">
		       <varname>?y2</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var desc="distance">
		       <varname>?dist</varname>
		       <vartype>coordinate</vartype>
		       <varrole>return</varrole>
		     </var>
		   </type>
		   <type>
		     <!-- move through a doorway (moveThrough wraps) -->
		     <name>move-through</name>
		     <desc>?mover moves to a new location</desc>
		     <var>
		       <varname>?mover</varname>
		       <vartype>actor</vartype>
		     </var>
		     <var>
		       <varname>?xdest</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var>
		       <varname>?ydest</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var>
		       <varname>?xdest1</varname>
		       <vartype>coordinate</vartype>
		     </var>
		     <var>
                    <varname>?ydest1</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                    <varrole>return</varrole>
                  </var>
                  <locks>motionLock</locks>
                </type>
  <type>
                  <name>startTraverse</name>
                  <desc>?mover moves until it reaches an obstacle</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                  </var>
                  <locks>motionLock</locks>
                </type>
                <type>
                  <!-- The script moveToRel wraps this; use it instead -->
                  <name>startMoveToRel</name>
                  <desc>?mover moves to a new location</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?xdest</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?ydest</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                    <varrole>return</varrole>
                  </var>
                  <locks>motionLock</locks>
                </type>
                <type>
                  <name>updateMoveToRel</name>
                  <desc>?mover moves to a new location</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                  </var>
                  <var>
                    <varname>?xdest</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?ydest</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <locks>motionLock</locks>
                </type>
                <type>
                  <!-- The script moveDist wraps this; use it instead -->
                  <name>startMoveDist</name>
                  <desc>?mover moves to a new location</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?dist</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                    <varrole>return</varrole>
                  </var>
                  <locks>motionLock</locks>
                </type>
                <type>
                  <!-- The script moveRel wraps this; use it instead -->
                  <name>startMoveRel</name>
                  <desc>?mover moves to a new location</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?xdest</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?ydest</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                    <varrole>return</varrole>
                  </var>
                  <locks>motionLock</locks>
                </type>

   <type>
                  <!-- The script timeMove wraps this; use it instead -->
                  <name>startTimeMove</name>
                  <desc>?mover moves</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?dist</varname>
                    <vartype>double</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                    <varrole>return</varrole>
                  </var>
                  <locks>motionLock</locks>
                </type>
                <type>
                  <!-- The script timeTurn wraps this; use it instead -->
                  <name>startTimeTurn</name>
                  <desc>?mover turns</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?heading</varname>
                    <vartype>double</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                    <varrole>return</varrole>
                  </var>
                  <locks>motionLock</locks>
                </type>
  <type>
                  <!-- Check status of GPS Server -->
                  <name>gpsready</name>
                  <desc>?mover queries GPS</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                </type>
  </subtypes>
                </type>
                <type>
  <name>speechProdPrimitive</name>
              <subtypes>
                <type>
                  <!-- Say something -->
                  <name>sayTextNow</name>
                  <desc>?speaker says ?statement to ?target</desc>
                  <api>say something to someone</api>
                  <var>
                    <varname>?speaker</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?target</varname>
                    <vartype>interactor</vartype>
                    <vardefault>nobody</vardefault>
                  </var>
                  <var desc="the phrase to be spoken (vars will be bound)">
                    <!-- The value of this parameter is spoken -->
                    <varname>?statement</varname>
                    <vartype>text</vartype>
                  </var>
                  <locks>speechLock</locks>
                </type>
                <type>
                  <!-- ICARUS version of above -->
                  <name>report</name>
                  <desc>?speaker says ?statement to ?target</desc>
                  <var>
                    <varname>?speaker</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?target</varname>
                    <vartype>interactor</vartype>
                    <vardefault>nobody</vardefault>
                  </var>
                  <var>
                    <!-- The value of this parameter is spoken -->
                    <varname>?statement</varname>
                    <vartype>text</vartype>
                  </var>
                  <locks>speechLock</locks>
                </type>
  <type>
                  <!-- Start chat -->
                  <name>startChat</name>
                  <desc>?speaker begins chatting about ?topic</desc>
                  <var>
                    <varname>?speaker</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?topic</varname>
                    <vartype>text</vartype>
                  </var>
                </type>
   <type>
                  <!-- Reddy look at -->
                  <name>lookAt</name>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?theta</varname>
                    <vartype>lookInt</vartype>
                  </var>
                  <var>
                    <varname>?phi</varname>
                    <vartype>lookInt</vartype>
                  </var>
                  <locks>visionLock</locks>
                </type>
 <type>
                  <!-- Pan PTU left -->
                  <name>lookLeft</name>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?intensity</varname>
                    <vartype>lookInt</vartype>
                  </var>
                  <locks>visionLock</locks>
                </type>
                <type>
                  <!-- Pan PTU right -->
                  <name>lookRight</name>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?intensity</varname>
                    <vartype>lookInt</vartype>
                  </var>
                  <locks>visionLock</locks>
                </type>
                <type>
                  <!-- Return PTU to origin -->
                  <name>lookForward</name>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <locks>visionLock</locks>
                </type>
 <type>
                  <name>lookFor</name>
                  <desc>?viewer looks for ?type</desc>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?type</varname>
                    <vartype>text</vartype>
                  </var>
                  <!--
                  <var>
                    <varname>?col</varname>
                    <vartype>text</vartype>
                  </var>
                  -->
                  <var>
                    <varname>?loc</varname>
                    <vartype>text</vartype>
                  </var>
                  <var>
                    <varname>?perc</varname>
                    <vartype>percept</vartype>
                    <varrole>return</varrole>
                  </var>
                  <benefit>100</benefit>
                  <cost>50</cost>
                  <minurg>0.5</minurg>
                  <maxurg>0.5</maxurg>
                  <timeout>60</timeout>
                  <locks>headLock faceLock blinkLock</locks>
                </type>
                <!-- End lookFor -->
                <!-- Begin lookForColor -->
                <!-- probably need to call this multiple times while turning in place -->
                <type>
                  <name>lookForColor</name>
                  <desc>?viewer looks for ?type</desc>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?type</varname>
                    <vartype>text</vartype>
                  </var>
                  <var>
                    <varname>?col</varname>
                    <vartype>text</vartype>
                  </var>
                  <var>
                    <varname>?perc</varname>
                    <vartype>percept</vartype>
                    <varrole>return</varrole>
                  </var>
                  <benefit>100</benefit>
                  <cost>50</cost>
                  <minurg>0.5</minurg>
                  <maxurg>0.5</maxurg>
                  <timeout>60</timeout>
                  <locks>headLock faceLock blinkLock</locks>
                </type>
                <!-- End lookForColor -->
              </subtypes>
            </type>



                <type>
                  <!-- Return true -->
                  <name>true</name>
                  <api>boolean value true</api>
                </type>
              </subtypes>
            </type>
          </subtypes>
        </type>
	<type>
	  <name>script</name>
	      <subtypes>
		<type>
		  <name>DemoAction</name>
		  <desc>a demo action</desc>
		  <taskname>Demo</taskname>
		  <benefit>500</benefit>
		  <cost>50</cost>
		  <timeout>1000</timeout>
		  <var>
		    <varname>?robot</varname>
		    <vartype>actor</vartype>
		  </var>
		  <actspec>printText "printing this text"</actspec>
		  <actspec>sayTextNow "Saying this text"</actspec>
		  <actspec>logText "loggingThisText"</actspec>
		  <actspec>moveRel ?robot 0 1.0</actspec>
		</type>
	      	<!-- STARTMOVETO -->
		<type planner="true">
 <name>moveFromTo</name>
              <desc>?act moves to ?xdest ?ydest</desc>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?from</varname>
                <vartype>location</vartype>
              </var>
              <var>
                <varname>?to</varname>
                <vartype>location</vartype>
              </var>
              <conditions>
                <atstart>at(?act,?from)</atstart>
                <overall>connected(?from,?to)</overall>
              </conditions>
              <effects postcond="true">
                <atstart>not(at(?act,?from))</atstart>
                <atend>at(?act,?to)</atend>
              </effects>
              <locks>motionLock</locks>
              <cost>25.0</cost>
              <timeout>50</timeout>
              <control>if</control>
              <control> not</control>
              <actspec>  moveTo ?act ?to</actspec>
              <control> endnot</control>
              <control>then</control>
              <actspec> actionFail</actspec>
              <control>endif</control>
            </type>
 <type planner="true">
              <!-- Turn around and look for objects of type. -->
              <name>look-for</name>
              <desc>?act searches for ?bx</desc>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?obj</varname>
                <vartype>pseudobject</vartype>
              </var>
              <!--
                  <var>
                  <varname>?col</varname>
                  <vartype>color</vartype>
                  </var>
                  <var>
                  <varname>?pa</varname>
                  <vartype>pattern</vartype>
                  </var>
              -->
              <var>
                <varname>?loc</varname>
                <vartype>location</vartype>
              </var>
              <var>
                <varname>!actionID</varname>
                <vartype>long</vartype>
              </var>
              <var>
                <varname>!actionStatus</varname>
                <vartype>text</vartype>
              </var>
              <var>
                <varname>!perc</varname>
                <vartype>percept</vartype>
              </var>
              <cost>100.0</cost>
              <timeout>15</timeout>
              <conditions>
                <!--
                    <atstart>has_property(?obj,?co)</atstart>
                    <atstart>has_property(?obj,?pa)</atstart>
                    <overall>in(?obj,?loc)</overall>
                -->
                <atstart>at(?act,?loc)</atstart>
                <overall>at(?act,?loc)</overall>
              </conditions>
              <effects>
                <atend always="true">looked_for(?act,?obj,?loc)</atend>
                <atend>found(?act,?obj,?loc)</atend>
              </effects>
              <!--
                  <actspec> printText "?act ready to lookFor ?col in ?loc "</actspec>
              -->
              <control>if</control>
              <control> not</control>
              <actspec>  lookFor ?act ?obj ?loc !perc</actspec>
              <control> endnot</control>
              <control>then</control>
              <actspec> actionFail</actspec>
              <control>endif</control>
              <!-- NEED TO WORK OUT NAMING...
                   <actspec>getTokenName ?act !perc ?bx</actspec>
              -->
            </type>


		  <name>startMoveTo</name>
		  <desc>?mover moves to a new location</desc>
		  <var>
		    <varname>?mover</varname>
		    <vartype>actor</vartype>
		  </var>
		  <var>
		    <varname>?xdest</varname>
                    <vartype>coordinate</vartype>
		  </var>
		  <var>
		    <varname>?ydest</varname>
		    <vartype>coordinate</vartype>
		  </var>
		  <var>
		    <varname>?actionID</varname>
		    <vartype>long</vartype>
		    <varrole>return</varrole>
		  </var>
		  <locks>motionLock</locks>
                </type>
		<!-- MOVETO -->
		<type>
		  <name>move-to</name>
                  <desc>?mover moves to a new location</desc>
                  <var>
                    <varname>?mover</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?xdest</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?ydest</varname>
                    <vartype>coordinate</vartype>
                  </var>
                  <var>
                    <varname>?actionID</varname>
                    <vartype>long</vartype>
                    <varrole>return</varrole>
                  </var>
                  <locks>motionLock</locks>
                </type>
	      </subtypes>
	    </type>
	    <type>
	      <!-- VISION PRIMITIVE -->
              <name>visionPrimitive</name>
              <subtypes>
		<!--BEGINNING LOOKFOR -->
		<type>
		  <name>lookFor</name>
		  <desc>?viewer looks for ?type</desc>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?type</varname>
                    <vartype>text</vartype>
                  </var>
		   <var>
                    <varname>?loc</varname>
                    <vartype>text</vartype>
                  </var>
                  <var>
                    <varname>?perc</varname>
                    <vartype>percept</vartype>
                    <varrole>return</varrole>
                  </var>
                  <benefit>100</benefit>
                  <cost>50</cost>
                  <minurg>0.5</minurg>
                  <maxurg>0.5</maxurg>
                  <timeout>60</timeout>
                  <locks>headLock faceLock blinkLock</locks>
		</type>
		<!-- LOOKFOR COLOR -->
		<type>
                  <name>lookForColor</name>
                  <desc>?viewer looks for ?type</desc>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?type</varname>
                    <vartype>text</vartype>
                  </var>
                  <var>
                    <varname>?col</varname>
                    <vartype>text</vartype>
                  </var>
                  <var>
                    <varname>?perc</varname>
                    <vartype>percept</vartype>
                    <varrole>return</varrole>
                  </var>
                  <benefit>100</benefit>
                  <cost>50</cost>
                  <minurg>0.5</minurg>
                  <maxurg>0.5</maxurg>
                  <timeout>60</timeout>
                  <locks>headLock faceLock blinkLock</locks>
                </type>
		<!-- LOOKFOR TYPE -->
		<type>
                  <name>lookForType</name>
                  <desc>?viewer looks for ?type</desc>
                  <var>
                    <varname>?viewer</varname>
                    <vartype>actor</vartype>
                  </var>
                  <var>
                    <varname>?type</varname>
                    <vartype>text</vartype>
                  </var>
                  <var>
                    <varname>?perc</varname>
                    <vartype>percept</vartype>
                    <varrole>return</varrole>
                  </var>
                  <benefit>100</benefit>
                  <cost>50</cost>
                  <minurg>0.5</minurg>
                  <maxurg>0.5</maxurg>
                  <timeout>60</timeout>
                  <locks>headLock faceLock blinkLock</locks>
                </type>
	      
                <!-- <type> -->
                <!--   Return true  -->
                <!--   <name>true</name> -->
                <!--   <api>boolean value true</api> -->
                <!-- </type> -->
              </subtypes>
            </type>
          </subtypes>
        </type>
   
      </subtypes>
    </type>
  </subtypes>
    <goal>spin(self)</goal>
  </type>