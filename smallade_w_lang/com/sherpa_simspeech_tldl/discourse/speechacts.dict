a: NP / N : # x. x : # x. x
and: (S / S) | S : # x # y. <> (x & <> y),# x # y. <> x & <> y : # x # y. x ; y , # x # y. x || y 
around: NP, N : # x. x @ around : # x. x @ around
behind: NP, N : # x. x @ behind : # x. x @ behind
for: PP / NP : # x. x : # x. x
front: PP / PP : # x. x @ in-front : # x. x @ in-front
go: (S / PP) / NP : # x # y.  move(x`y) : # x # y. move(x`y)
house: N : # x. x @ house : # x. x @ house
image: N : # x. x @ image : # x. x @ image
in: PP / PP : # x. x : # x. x
jacket: NP, N :  # x. x @ jacket  : # x. x @ jacket 
left: NP, N : # x. x @ left : # x. x @ left
look: (S / NP) / PP : # x # y.  detect(x`y) : # x # y. detect(x`y) 
off: NP, N : # x. x @ up : # x. x @ up
of: PP / NP : # x. x : # x. x
picture: N : # x. x @ picture : # x. x @ picture
red: NP, N : # x. x @ red  : # x. x @ red
right: NP, N : # x. x @ right : # x. x @ right
rock: N : # x. x @ rock : # x. x @ rock
search: S / PP : # x. detect(x) : # x. detect(x)
stop: S : # x. x @ stop : # x. x @ stop
take: S / NP : # x. take(x) : # x. take(x)
this: NP / N : # x. pointed_at(x) : # x. pointed_at(x)
to: NP / NP : # x. x : # x. x
to: PP / NP : # x. x : # x. x
tree: N : # x. x @ tree : # x. x @ tree
victim: N : # x. x @ victim : # x. x @ victim
wait: S : # x. x @ wait : # x. x @ wait

