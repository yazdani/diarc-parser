a: NP/ N : # x. x : # x. x
above: S / PP : # x. inside(above`x) : # x. inside(above`x)
above: NP, N : # x. x @ above : # x. x @ above
across: NP, N : # x. x @ across : # x. x @ across
ahead: NP, N: # x. x @ ahead : # x. x @ ahead
an: NP/ N : # x. x : # x. x
and: (S / S) | S : # x # y. <> (x & <> y),# x # y. <> x & <> y : # x # y. x ; y , # x # y. x || y 
area: NP, N : # x. x @ area : # x. x @ area
around: S / PP : # x. inside(around`x) : # x. inside(around`x)
around: NP, N : # x. x @ around : # x. x @ around
back: NP, N : # x. x @ back : # x. x @ back
behind: S / PP : # x. inside(behind`x) : # x. inside(behind`x)
behind: S / NP : # x. inside(behind`x) : # x. inside(behind`x)
behind: NP, N : # x. x @ behind : # x. x @ behind
blue: NP / N: # x. blue(x) : # x. blue(x)
biggest: NP / N: # x. big(x) : # x. big(x)
biggest: NP / NP: # x. big(x) : # x. big(x)
big: NP / N: # x. big(x) : # x. big(x)
big: NP / NP: # x. big(x) : # x. big(x)
broken: NP / N: # x. broken(x) : # x. broken(x)
brown: NP / N: # x. brown(x) : # x. brown(x)
close: NP, N : # x. x @ close : # x. x @ close
come: S / NP : # x. come(x) : # x. come(x)
east: NP, N : # x. x @ east : # x. x @ east
first: NP / N: # x. one(x) : # x. one(x)
for: PP / NP : # x. x : # x. x
front: PP / PP : # x. x @ in-front-of : # x. x @ in-front-of
go: (S / PP) / NP : # x # y.  move(x`y) : # x # y. move(x`y)
go: (S / NP) / NP : # x # y.  move(x`y) : # x # y. move(x`y)
go: S / PP : # x. move(x) : # x. move(x)
green: NP / N: # x. green(x) : # x. green(x)
house: NP, N : # x. x @ house : # x. x @ house
huge: NP / N: # x. big(x) : # x. big(x)
huge: NP / NP: # x. big(x) : # x. big(x)
image: NP, N : # x. x @ image : # x. x @ image
in: PP / PP : # x. x : # x. x
it: NP, N : # x. x @ image : # x. x @ image
jacket: NP, N :  # x. x @ jacket  : # x. x @ jacket 
large: NP / N: # x. big(x) : # x. big(x)
large: NP / NP: # x. big(x) : # x. big(x)
largest: NP / N: # x. big(x) : # x. big(x)
left: S / PP : # x. inside(left`x) : # x. inside(left`x)
left: NP, N : # x. x @ left : # x. x @ left
look: (S / NP) / PP : # x # y.  detect(x`y) : # x # y. detect(x`y) 
look: (S / PP) : # x.  detect(x) : # x. detect(x)
mountains: NP, N : # x. x @ mountains : # x. x @ mountains
mountain: NP, N : # x. x @ mountain : # x. x @ mountain
move: (S / PP) / NP : # x # y.  move(x`y) : # x # y. move(x`y)
move: (S / NP) / NP : # x # y.  move(x`y) : # x # y. move(x`y)
move: S / PP : # x. move(x) : # x. move(x)
next: S / PP : # x. inside(next`x) : # x. inside(next`x)
next: NP, N :  # x. x @ next  : # x. x @ next
north: NP, N : # x. x @ north : # x. x @ north
off: NP, N : # x. x @ off : # x. x @ off
of: PP / NP : # x. x : # x. x
over: S / NP : # x. inside(over`x) : # x. inside(over`x)
over: NP, N : # x. x @ across : # x. x @ across
picture: NP, N : # x. x @ picture : # x. x @ picture
photo: NP, N : # x. x @ photo : # x. x @ photo
pullover: NP, N :  # x. x @ pullover : # x. x @ pullover
pylon: NP, N :  # x. x @ pylon : # x. x @ pylon
reach: VP / NP : # x. x : # x. x
red: N : # x. x @ red  : # x. x @ red
red: NP / N: # x. red(x) : # x. red(x)
right: S / PP : # x. inside(right`x) : # x. inside(right`x)
right: NP, N : # x. x @ right : # x. x @ right
river: N / PP : # x. x @ river : # x. x @ river
river: NP, N : # x. x @ river : # x. x @ river
rock: N / PP : # x. x @ rock : # x. x @ rock
rock: NP, N : # x. x @ rock : # x. x @ rock
scan: S / NP: # x. scan(x) : # x. scan(x)
search: S / PP : # x. detect(x) : # x. detect(x)
second: NP / N: # x. two(x) : # x. two(x)
sequ: (S / S) | S : # x # y. <= (x & <= y),# x # y. <= x & <= y : # x # y. x <= y , # x # y. x <= y 
show: S / NP :  # x. show(x) : # x. show(x)
small: NP / N : # x. small(x) : # x. small(x) 
smallest: NP / N : # x. small(x) : # x. small(x) 
south: NP, N : # x. x @ south : # x. x @ south
straight: NP, N: # x. x @ straight : # x. x @ straight
stop: S : # x. x @ stop : # x. x @ stop
take: S / NP : # x. take(x) : # x. take(x)
take: (S / PP) / NP : # x # y.  take(x`y) : # x # y. take(x`y)
this: NP / N : # x. pointed_at(x) : # x. pointed_at(x)
that: NP / N : # x. pointed_at(x) : # x. pointed_at(x)
the: NP / N : # x. nil(x) : # x. nil(x)
the: NP / NP : # x. x : # x. x
third: NP / N: # x. three(x) : # x. three(x)
to: S / NP : # x. inside(next`x) : # x. inside(next`x)
to: S / PP : # x. inside(next`x) : # x. inside(next`x)
to: PP / NP : # x. x : # x. x
to: NP, N : # x. x @ to : # x. x @ to
tree: N / PP : # x. x @ tree : # x. x @ tree
tree: NP, N : # x. x @ tree : # x. x @ tree
turn: S / NP : # x. turn(x) : # x. turn(x)
under: S / PP : # x. inside(under`x) : # x. inside(under`x)
under: NP, N : # x. x @ under : # x. x @ under
until: PP / NP : # x. x : # x. x
victim: N / PP : # x. x @ victim : # x. x @ victim
victim: NP, N : # x. x @ victim : # x. x @ victim
wait: S : # x. x @ wait : # x. x @ wait
west: NP, N : # x. x @ west : # x. x @ west
wood: N / PP : # x. x @ wood : # x. x @ wood
wood: NP,N : # x. x @ wood : # x. x @ wood
you: NP / VP : # x. x : # x. x
your: NP / N : # x. robot(x) : # x. robot(x)

