<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!--    comments are enclosed within standard xml comment brackets (like this line)  --> 

<!-- GENERAL NOTES:  

    * The coordinate system is Euclidean.  NOTE THAT THIS IS DIFFERENT FROM THE SCREEN COORDINATE SYSTEM, WHERE Y grows DOWN, not up!  all numbers can be doubles. 
    * The Z dimension, to the extent that it is used, points UPWARDS.
    * All measurements are in METERS and RADIANS
    * The entire configuration MUST BE ENCLOSED within the <config> tag.
    
    
    A note about NUMERICAL PARAMETERS:
    * Expressions are EVALUATED.  Therefore, you can write things like x="5.32 * 6"
    * Note that you do NOT need to put a decimal after division - though you can if it makes you feel better.
    * You can use the constant PI.  I.e.: theta="PI / 4"
    * You can use the built-in constant RAND which is very handy, but OVERLOADED WITH MEANING:
    *    For angles, RAND is anywhere between 0 and 2*PI.  Hence, if you set the robot's theta
             to RAND, it will face in any possible direction.
    *    Everywhere else, RAND is a number between 0 and 1.  Hence, you can set the fraction by which
             a door is open to RAND.  Or the position of a block as "x = 3 + (4*RAND)"
    * Finally, constants are NOT cASe SenSitiVE.  Write them as awkwardly as you wish...
    


    possible tokens: 

        <world [*optional* bounded="true/false" (true by default)]>   <shape> {particular_shape} <shape>   </world>.  
        	Note that EACH FILE MUST SPECIFY WORLD DIMENSIONS.
        	Bounded refers to whether the simulation should automatically put in walls at the world's edge, so that
        		the robot does not drive off into nothingness.  It is true by default.
        	  

        shape_and_optional_actions are just comprised of a SINGLE shape node, and an OPTIONAL actions-list node: 
            let's start with shape:  
	            <shape [optional z="0"] [optional zLength="âˆž"] [optional rotation="0"] > {particular_shape} </shape> 
	                the particular shape can be: 
	                    <rect x="" y="" xLength="" yLength="" />   where (x,y) is bottom left coordinate 
	                    <poly>    <pt x="" y=""/>  <pt x="" y=""/>  ...  </poly>   for a polygon 
            the actions list is in the form <actions>  {action_item}[s]  </actions> 
                an action_item can be one of the following: 
                    <action> <message text="" /> </action> 
                    <action> <exit/> </action> 
                    <action> <remove/> <action>    (removes object from simulator.  ONLY APPLICABLE to DYNAMIC OBJECTS) 
                the actions will be executed (IN ORDER) whenever one of the robot lines intersects one of the lines of the shape 

         objects can be: 
            <wall>    [optional {color}] {shape_and_optional_actions}   </wall> 
            <door [*optional* name=""] openFraction="[0 through 1.0]" x="" y="" width="" thickness="" closed_angle="" pivot_angle="" />    
                   where (x,y) specify pivot point, the closed angle refers to the angle of the door when closed    
                   (relative to the pivot point, where east = 0, north = PI/2, etc), and pivot_angle refers to the angle difference    
                   (typically +/- ~PI/2.0) relative to the closed_angle that the door should swing to when opened.    
            <landmark [*optional* name=""] [*optional* laserable="false"]>    [optional {color}]  {shape_and_optional_actions}     </landmark>  
            <block [*optional* name=""]>    [optional {color}]  {shape_and_optional_actions}    </block>.
            <box [*optional* name=""]>    [optional {color}]  {shape_and_optional_actions}    </block>.
            
        the color node is of one of two forms:
        	* <color name="" />     where "name" is any color name specified within com.adesim.ColorConverter.java.
        	* <color red="" green="" blue="" />    where red, green, and blue are ints 0-255.  When the sim is asked
        	     for colors by name, it will use the ColorConverter to find the closest named color for the specified RGB. 
                

        it is also possible to specify an initial starting position for the robot(s):  
             <init-robot-positions>
             	<position x="" y ="" theta=""/>   (for first robot that joins the simulation)
             	<position x="" y ="" theta=""/>   (for second robot that joins the simulation)
             	... etc ...
             </init-robot-positions>
             Where (x,y) are the coordinates, and theta is the robot's angle, 
                 in radians or "rand", with 0 facing right, and the angle growing counter-clockwise.
                 NOTE that if a particular initial position is explicitly specified
                 on the command line, it WILL override the init-robot spec. 
                
-->




<config>


	<world>
		<shape>
			<rect x="0" y="0" xLength="16" yLength="16"/> 
		</shape>
	</world>
	
	
	<init-robot-positions>
			<position x="9" y="9" theta="0"/>
	</init-robot-positions>
	
	
	<!-- side walls -->
	<wall> <color name="white" /> <shape> <rect x="0" y="0" xLength="16" yLength="0.1" /> </shape> </wall>
	<wall> <color name="white" /> <shape> <rect x="0" y="0" xLength="0.1" yLength="16" /> </shape> </wall>
	<wall> <color name="white" /> <shape> <rect x="15.9" y="0" xLength="0.1" yLength="16" /> </shape> </wall>
	<wall> <color name="white" /> <shape> <rect x="0" y="15.9" xLength="16" yLength="0.1" /> </shape> </wall>
	
	
	
	<!-- center block -->
	<landmark laserable="true"> 
                <color name="purple" />
		<shape zLength="2.0">
			<rect x="6" y="6" xLength="2" yLength="2" />
		</shape>
	</landmark>
	
	
	<landmark laserable="false"> 
                <color name="purple" />
		<shape z="1" zLength="0.5">
			<rect x="15.9" y="8" xLength="0.05" yLength="0.5" />
		</shape>
	</landmark>
	
        <!--
	<landmark name="goal">
		<shape>
			<rect x="12.1" y="12.1" xLength="1.7" yLength="1.7" />
		</shape>
                -->
                <!--
		<actions> 	
			<action> <message text="at end" /> </action>
		</actions>
                -->
                <!--
	</landmark>
        -->

        <!--
	<landmark name="waypoint">
		<shape>
			<rect x="12.1" y="2.6" xLength="0.7" yLength="0.7" />
                </shape>
                -->
                <!--
		<actions> 	
			<action> <message text="at middle" /> </action>
                        <action> <exit/> </action>
		</actions>
                -->
                <!--
	</landmark>
        -->


</config>
