<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<type>  
  <name>entity</name>
  <subtypes>
    <type>
      <name>constant</name>
      <subtypes>
        <type planner="false">
          <name>r_start</name>
          <ctype>room</ctype>
        </type>
        <type planner="false">
          <name>h_start</name>
          <ctype>hallway</ctype>
        </type>
        <type planner="false">
          <name>d_start</name>
          <ctype>doorway</ctype>
        </type>
        <type planner="false">
	  <name>cross</name>
	  <ctype>pattern</ctype>
	</type>
        <type planner="true">
          <name>arm</name>
          <ctype>pseudobject</ctype>
        </type>
        <type planner="true">
          <name>cmdrx</name>
          <ctype>commander</ctype>
        </type>
        <type planner="true">
          <name>cmdry</name>
          <ctype>commander</ctype>
        </type>
        <type planner="true">
          <name>cmdrz</name>
          <ctype>commander</ctype>
        </type>
        <type planner="true">
          <name>clear_pr</name>
          <ctype>property</ctype>
        </type>
        <type planner="true">
          <name>on_pr</name>
          <ctype>modestate</ctype>
        </type>
        <type planner="true">
          <name>off_pr</name>
          <ctype>modestate</ctype>
        </type>
        <type planner="true">
          <name>ok_pr</name>
          <ctype>armstate</ctype>
        </type>
        <type planner="true">
          <name>nok_pr</name>
          <ctype>armstate</ctype>
        </type>
      </subtypes>
    </type>
    <type>
      <name>object</name>
      <subtypes>
        <type planner="false">
          <name>pseudobject</name>
          <subtypes>
            <type planner="false">
              <name>location</name>
              <api>type</api>
              <subtypes>
                <type planner="false">
                  <name>room</name>
                  <api>type</api>
                  <subtypes>
                    <type planner="true">
                      <name>endroom</name>
                      <api>type</api>
                    </type>
                  </subtypes>
                </type>
              </subtypes>
            </type>
            <type planner="false">
              <name>box</name>
              <api>type</api>
              <subtypes>
                <type planner="true">
                  <name>medkit</name>
                  <api>type</api>
                </type>
              </subtypes>
            </type>
            <type planner="false">
              <name>property</name>
              <api>type</api>
              <subtypes>
                <type planner="true">
                  <name>modestate</name>
                  <api>type</api>
                </type>
                <type planner="true">
                  <name>armstate</name>
                  <api>type</api>
                </type>
              </subtypes>
            </type>
            <type planner="false">
              <name>agent</name>
              <api>type</api>
              <subtypes>
                <type planner="true">
                  <name>commander</name>
                  <api>type</api>
                </type>
              </subtypes>
            </type>
            <type>
              <name>data</name>
              <api>type</api>
              <subtypes>
                <type>
                  <name>predicate</name>
                  <subtypes>
                    <type planner="true">
                      <name>stealthmode</name>
                      <var>
                        <varname>?mode</varname>
                        <vartype>modestate</vartype>
                      </var>
                    </type>
                  </subtypes>
                </type>
              </subtypes>
            </type>
          </subtypes>
        </type>
      </subtypes>
    </type>
    <type>
      <name>state</name>
      <subtypes>
        <type planner="false">
          <name>at(cmdrx,r_start)</name>
        </type>
        <type planner="true">
          <name>has_property(arm,ok_pr)</name>
        </type>
        <type planner="true">
          <name>stealthmode(off_pr)</name>
        </type>
      </subtypes>
    </type>
    <type>
      <name>goal</name>
      <subtypes>
        <type planner="false">
          <name>at(self,h_start)</name>
          <hard>true</hard>
          <deadline>1450</deadline>
          <benefit>1000</benefit>
        </type>
      </subtypes>
    </type>
    <type>
      <name>action</name>
      <subtypes>
        <type>
          <name>primitive</name>
          <subtypes>
            <type>
              <name>miscPrimitive</name>
              <subtypes>
                <type>
                  <!-- Return true -->
                  <name>true</name>
                  <api>boolean value true</api>
                </type>
              </subtypes>
            </type>
          </subtypes>
        </type>
        <type>
          <name>script</name>
          <subtypes>
            <type>
              <name>DemoAction</name>
              <desc>a demo action</desc>
              <taskname>Demo</taskname>
              <benefit>500</benefit>
              <cost>50</cost>
              <timeout>1000</timeout>
              <var>
                <varname>?robot</varname>
                <vartype>actor</vartype>
              </var>
              <actspec>printText "printing this text"</actspec>
              <actspec>sayTextNow "Saying this text"</actspec>
              <actspec>logText "loggingThisText"</actspec>
              <actspec>moveRel ?robot 0 1.0</actspec>
            </type>
            <type planner="true">
              <!-- Begin pickUpMedkit -->
              <name>pickUpMedkit</name>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?obj</varname>
                <vartype>pseudobject</vartype>
              </var>
              <!-- ?loc only needed for type, not used by action -->
              <var>
                <varname>?loc</varname>
                <vartype>location</vartype>
              </var>
              <cost>30.0</cost>
              <timeout>20</timeout>
              <conditions>
                <!-- does at(?act,?obj) make more sense? -->
                <atstart>at(?act,?loc)</atstart>
                <overall>at(?act,?loc)</overall>
                <atstart>in(?obj,?loc)</atstart>
                <atstart>found(?act,?obj,?loc)</atstart>
              </conditions>
              <effects>
                <atend>have(?obj,?act)</atend>
                <atstart>not(in(?obj,?loc))</atstart>
                <!-- PWS: is there a way to say that ?obj is always wherever ?act is? -->
              </effects>
              <actspec>pickUpObject ?act ?obj</actspec>
            </type>
            <!-- End pickUpMedkit -->
            <!-- Begin enterFromToNoCheck -->
            <type planner="true">
              <!-- enter room -->
              <name>enterFromToNoCheck</name>
              <desc>?act enters ?dest</desc>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?door</varname>
                <vartype>doorway</vartype>
              </var>
              <var>
                <varname>?from</varname>
                <vartype>hallway</vartype>
              </var>
              <var>
                <varname>?to</varname>
                <vartype>room</vartype>
              </var>
              <locks>motionLock</locks>
              <cost>7.0</cost>
              <timeout>25</timeout>
              <conditions>
                <atstart>stealthmode(off_pr)</atstart>
                <atstart>at(?act,?from)</atstart>
                <overall>door_connected(?door,?from,?to)</overall>
                <overall>has_property(?door,open_pr)</overall>
              </conditions>
              <effects postcond="false">
                <atstart>not(at(?act,?from))</atstart>
                <atend>at(?act,?to)</atend>
              </effects>
              <actspec>enterRoom ?act false</actspec>
            </type>
            <!-- End enterFromToNoCheck -->
            <!-- Begin enterFromToCheck -->
            <type planner="true">
              <!-- enter room, looking around the room just before entering -->
              <name>enterFromToCheck</name>
              <desc>?act enters ?dest</desc>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?door</varname>
                <vartype>doorway</vartype>
              </var>
              <var>
                <varname>?from</varname>
                <vartype>hallway</vartype>
              </var>
              <var>
                <varname>?to</varname>
                <vartype>room</vartype>
              </var>
              <locks>motionLock</locks>
              <cost>20.0</cost>
              <timeout>35</timeout>
              <conditions>
                <atstart>stealthmode(on_pr)</atstart>
                <atstart>has_property(?to,clear_pr)</atstart>
                <atstart>at(?act,?from)</atstart>
                <overall>door_connected(?door,?from,?to)</overall>
                <overall>has_property(?door,open_pr)</overall>
              </conditions>
              <effects postcond="false">
                <atstart>not(at(?act,?from))</atstart>
                <atend>at(?act,?to)</atend>
              </effects>
              <actspec>enterRoom ?act true</actspec>
            </type>
            <!-- End enterFromToCheck -->
            <!-- Begin exitFromToNoCheck -->
            <type planner="true">
              <!-- exit room -->
              <name>exitFromToNoCheck</name>
              <desc>?act exits ?curr</desc>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?door</varname>
                <vartype>doorway</vartype>
              </var>
              <var>
                <varname>?from</varname>
                <vartype>room</vartype>
              </var>
              <var>
                <varname>?to</varname>
                <vartype>hallway</vartype>
              </var>
              <locks>motionLock</locks>
              <cost>7.0</cost>
              <timeout>25</timeout>
              <conditions>
                <atstart>stealthmode(off_pr)</atstart>
                <atstart>at(?act,?from)</atstart>
                <overall>door_connected(?door,?to,?from)</overall>
                <overall>has_property(?door,open_pr)</overall>
              </conditions>
              <effects postcond="false">
                <atstart>not(at(?act,?from))</atstart>
                <atend>at(?act,?to)</atend>
              </effects>
              <actspec>exitRoom ?act false</actspec>
            </type>
            <!-- End exitFromToNoCheck -->
            <!-- Begin exitFromToCheck -->
            <type planner="true">
              <!-- exit room, looking around the hallway just before exiting -->
              <name>exitFromToCheck</name>
              <desc>?act exits ?curr</desc>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?door</varname>
                <vartype>doorway</vartype>
              </var>
              <var>
                <varname>?from</varname>
                <vartype>room</vartype>
              </var>
              <var>
                <varname>?to</varname>
                <vartype>hallway</vartype>
              </var>
              <locks>motionLock</locks>
              <cost>20.0</cost>
              <timeout>35</timeout>
              <conditions>
                <atstart>stealthmode(on_pr)</atstart>
                <atstart>has_property(?to,clear_pr)</atstart>
                <atstart>at(?act,?from)</atstart>
                <overall>door_connected(?door,?to,?from)</overall>
                <overall>has_property(?door,open_pr)</overall>
              </conditions>
              <effects postcond="false">
                <atstart>not(at(?act,?from))</atstart>
                <atend>at(?act,?to)</atend>
              </effects>
              <actspec>exitRoom ?act true</actspec>
            </type>
            <!-- End exitFromToCheck -->
            <!-- Begin giveObjectToNoRequest -->
            <type planner="true">
              <name>giveObjectToNoRequest</name>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?obj</varname>
                <vartype>pseudobject</vartype>
              </var>
              <var>
                <varname>?comm</varname>
                <vartype>commander</vartype>
              </var>
              <!-- ?loc only needed for type, not used by action -->
              <var>
                <varname>?loc</varname>
                <vartype>location</vartype>
              </var>
              <cost>10.0</cost>
              <timeout>15</timeout>
              <conditions>
                <overall>has_property(arm,ok_pr)</overall>
                <atstart>have(?obj,?act)</atstart>
                <overall>at(?act,?loc)</overall>
                <overall>at(?comm,?loc)</overall>
              </conditions>
              <effects>
                <atend>not(have(?obj,?act))</atend>
                <atend>have(?obj,?comm)</atend>
              </effects>
              <actspec>actionFail</actspec>
            </type>
            <!-- End giveObjectToNoRequest -->


            <!-- Begin giveObjectToRequest -->
            <type planner="true">
              <name>giveObjectToRequestDSDEMO</name>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?obj</varname>
                <vartype>pseudobject</vartype>
              </var>
              <var>
                <varname>?comm</varname>
                <vartype>commander</vartype>
              </var>
              <var>
                <varname>!wirelessStatus</varname>
                <vartype>boolean</vartype>
              </var>
              <effects>
                <atend>bring(?act,?obj,?comm)</atend>
              </effects>
              <cost>5.0</cost>
              <timeout>75</timeout>
              <actspec> getWirelessStatus !wstat</actspec>
              <control>if</control>
              <actspec> !wstat</actspec>
              <control>then</control>
              <actspec> printText "No Wireless :("</actspec>
              <actspec>actionFail</actspec>
              <control>else</control>
              <actspec> printText "Wireless :)"</actspec>
              <control>endif</control>
            </type>
            <!-- End giveObjectToRequest -->




            <!-- Begin giveObjectToRequest -->
            <type planner="true">
              <name>giveObjectToRequest</name>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?obj</varname>
                <vartype>pseudobject</vartype>
              </var>
              <var>
                <varname>?comm</varname>
                <vartype>commander</vartype>
              </var>
              <!-- ?loc only needed for type, not used by action -->
              <var>
                <varname>?loc</varname>
                <vartype>location</vartype>
              </var>
              <cost>5.0</cost>
              <timeout>75</timeout>
              <conditions>
                <overall>has_property(arm,nok_pr)</overall>
                <atstart>have(?obj,?act)</atstart>
                <overall>at(?act,?loc)</overall>
                <overall>at(?comm,?loc)</overall>
              </conditions>
              <effects>
                <atend>not(have(?obj,?act))</atend>
                <atend>have(?obj,?comm)</atend>
              </effects>
              <actspec>printText "HERE'S WHERE I WOULD GENERATE A SPEECH ACT TO HAND OVER OBJECT"</actspec>
              <actspec>actionFail</actspec>
            </type>
            <!-- End giveObjectToRequest -->
            <!-- Begin moveFromTo -->
            <type planner="true">
              <name>moveFromTo</name>
              <desc>?act moves to ?xdest ?ydest</desc>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?from</varname>
                <vartype>location</vartype>
              </var>
              <var>
                <varname>?to</varname>
                <vartype>location</vartype>
              </var>
              <conditions>
                <atstart>at(?act,?from)</atstart>
                <overall>connected(?from,?to)</overall>
              </conditions>
              <effects postcond="true">
                <atstart>not(at(?act,?from))</atstart>
                <atend>at(?act,?to)</atend>
              </effects>
              <locks>motionLock</locks>
              <cost>25.0</cost>
              <timeout>50</timeout>
              <control>if</control>
              <control> not</control>
              <actspec>  moveTo ?act ?to</actspec>
              <control> endnot</control>
              <control>then</control>
              <actspec> actionFail</actspec>
              <control>endif</control>
            </type>
            <!-- End moveFromTo -->
            <!-- Begin meet -->
            <type planner="true">
              <name>meet</name>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?other</varname>
                <vartype>agent</vartype>
              </var>
              <var>
                <varname>?loc</varname>
                <vartype>location</vartype>
              </var>
              <desc>?act meets ?other</desc>
              <conditions>
                <atstart>at(?act,?loc)</atstart>
                <atstart>at(?other,?loc)</atstart>
              </conditions>
              <effects postcond="false">
                <atend>met(?act,?other)</atend>
              </effects>
              <locks>motionLock</locks>
              <cost>5.0</cost>
              <timeout>5</timeout>
              <!-- no action needed -->
            </type>
            <!-- End meet -->
            <!-- Begin look-for -->
            <type planner="true">
              <!-- Turn around and look for objects of type. -->
              <name>look-for</name>
              <desc>?act searches for ?bx</desc>
              <var>
                <varname>?act</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?obj</varname>
                <vartype>pseudobject</vartype>
              </var>
              <!--
                  <var>
                  <varname>?col</varname>
                  <vartype>color</vartype>
                  </var>
                  <var>
                  <varname>?pa</varname>
                  <vartype>pattern</vartype>
                  </var>
              -->
              <var>
                <varname>?loc</varname>
                <vartype>location</vartype>
              </var>
              <var>
                <varname>!actionID</varname>
                <vartype>long</vartype>
              </var>
              <var>
                <varname>!actionStatus</varname>
                <vartype>text</vartype>
              </var>
              <var>
                <varname>!perc</varname>
                <vartype>percept</vartype>
              </var>
              <cost>100.0</cost>
              <timeout>15</timeout>
              <conditions>
                <!--
                    <atstart>has_property(?obj,?co)</atstart>
                    <atstart>has_property(?obj,?pa)</atstart>
                    <overall>in(?obj,?loc)</overall>
                -->
                <atstart>at(?act,?loc)</atstart>
                <overall>at(?act,?loc)</overall>
              </conditions>
              <effects>
                <atend always="true">looked_for(?act,?obj,?loc)</atend>
                <atend>found(?act,?obj,?loc)</atend>
              </effects>
              <!--
                  <actspec> printText "?act ready to lookFor ?col in ?loc "</actspec>
              -->
              <control>if</control>
              <control> not</control>
              <actspec>  lookFor ?act ?obj ?loc !perc</actspec>
              <control> endnot</control>
              <control>then</control>
              <actspec> actionFail</actspec>
              <control>endif</control>
              <!-- NEED TO WORK OUT NAMING...
                   <actspec>getTokenName ?act !perc ?bx</actspec>
              -->
            </type>
            <!-- End look-for -->
            <!-- Begin spin -->
            <type>
              <name>spin</name>
              <var>
                <varname>?robot</varname>
                <vartype>actor</vartype>
              </var>
              <timeout>6000000000</timeout>
              <control>while</control>
              <actspec> true</actspec>
              <control>do</control>
              <control>endwhile</control>
            </type>
            <!-- End spin -->
            <!-- Begin Test -->
            <type>              
	      <name>Test</name>
              <var>
		<varname>?agent</varname>
		<vartype>actor</vartype>
	      </var>
              <!-- Local variables -->
	      <var>
		<varname>!id</varname>
		<vartype>long</vartype>
	      </var>
              <var>
                <varname>!x</varname>
                <vartype>coordinate</vartype>
              </var>
              <var>
                <varname>!y</varname>
                <vartype>coordinate</vartype>
              </var>
              <var>
                <varname>!ex</varname>
                <vartype>coordinate</vartype>
              </var>
              <var>
                <varname>!ey</varname>
                <vartype>coordinate</vartype>
              </var>
              <var>
                <varname>!ax</varname>
                <vartype>coordinate</vartype>
              </var>
              <var>
                <varname>!ay</varname>
                <vartype>coordinate</vartype>
              </var>
              <var>
                <varname>!heading</varname>
                <vartype>double</vartype>
              </var>
              <var>
                <varname>!dist</varname>
                <vartype>double</vartype>
              </var>
	      <timeout>600000000</timeout>
              <!--
              -->
              <actspec>exitRoom ?agent</actspec>
              <actspec>turnRel ?agent ${Math.PI/2}</actspec>
              <actspec>traverse ?agent</actspec>
              <actspec>turnRel ?agent ${Math.PI}</actspec>
              <actspec>startTraverse ?agent</actspec>
              <control>while</control>
              <control> not</control>
              <actspec>   getNearestDoor ?act !x !y !ex !ey !ax !ay !dist</actspec>
              <control> endnot</control>
              <control>do</control>
              <actspec> sleep ?agent 200</actspec>
              <control>endwhile</control>
              <actspec>qstop ?agent</actspec>
              <actspec>enterRoom ?agent</actspec>
              <actspec>retractFact enterRoomDir</actspec>
              <!--
                  <control>if</control>
	          <actspec> getTokenIdByColor ?agent red !id</actspec>
                  <control>then</control>
	          <actspec> printText "got red blob: !id "</actspec>
	          <actspec> getTokenHeading ?agent !id !heading</actspec>
                  <actspec> printText "heading !heading"</actspec>
                  <actspec> turnRel ?agent !heading</actspec>
	          <actspec> getTokenDistance ?agent !id !dist</actspec>
                  <actspec> printText "distance !dist"</actspec>
                  <actspec> - !dist 0.4 !dist</actspec>
                  <actspec> moveDist ?agent !dist</actspec>
	          <actspec> pickUpObject ?agent !id</actspec>
                  <control>endif</control>
              -->
              <actspec>exitRoom ?agent</actspec>
              <actspec>turnRel ?agent ${Math.PI/2}</actspec>
              <actspec>startTraverse ?agent</actspec>
              <control>while</control>
              <control> not</control>
              <actspec>   getNearestDoor ?act !x !y !ex !ey !ax !ay !dist</actspec>
              <control> endnot</control>
              <control>do</control>
              <actspec> sleep ?agent 200</actspec>
              <control>endwhile</control>
              <actspec>qstop ?agent</actspec>
              <actspec>enterRoom ?agent</actspec>
              <actspec>retractFact enterRoomDir</actspec>
	      <actspec>putDownObject ?agent !id</actspec>
              <actspec>exitRoom ?agent</actspec>
              <actspec>turnRel ?agent ${Math.PI/2}</actspec>
              <!--
                  <actspec>startTraverse ?agent</actspec>
                  <control>while</control>
                  <control> not</control>
                  <actspec>   getNearestDoor ?act !x !y !ex !ey !ax !ay !dist</actspec>
                  <control> endnot</control>
                  <control>do</control>
                  <actspec> sleep ?agent 200</actspec>
                  <control>endwhile</control>
                  <actspec>startTraverse ?agent</actspec>
                  <control>while</control>
                  <control> not</control>
                  <actspec>   getNearestDoor ?act !x !y !ex !ey !ax !ay !dist</actspec>
                  <control> endnot</control>
                  <control>do</control>
                  <actspec> sleep ?agent 200</actspec>
                  <control>endwhile</control>
                  <actspec>enterRoom ?agent</actspec>
              -->
            </type>
            <!-- End Test -->
            <type>
              <name>lookForPickUp</name>
              <var>
                <varname>?robot</varname>
                <vartype>actor</vartype>
              </var>
              <var>
                <varname>?perc</varname>
                <vartype>text</vartype>
              </var>
              <timeout>6000000000</timeout>
              <control>if</control>
              <actspec> lookFor ?robot medkit here ?perc</actspec>
              <control>then</control>
              <actspec> pickUpObject ?robot ?perc</actspec>
              <control>else</control>
              <actspec> printText "Didn't find a medkit"</actspec>
              <control>endif</control>
            </type>
            <!-- Begin spin -->
            <type>
              <name>enterRoomReset</name>
              <var>
                <varname>?robot</varname>
                <vartype>actor</vartype>
              </var>
              <timeout>6000000000</timeout>
              <actspec>enterRoom self</actspec>
              <actspec>sleep self 500</actspec>
              <actspec>resetOdometry self</actspec>
            </type>
            <!-- End spin -->
          </subtypes>
        </type>
      </subtypes>
    </type>
  </subtypes>
  <!--
      <goal>bg-blink(self)</goal>
      <goal>bg-headsway(self)</goal>
  -->
  <goal>spin(self)</goal>
  <!--  <exec>enterRoomReset self</exec>-->
</type>
