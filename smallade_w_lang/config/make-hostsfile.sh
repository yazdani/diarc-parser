#!/bin/sh
# ADE 1.0Beta
# produces a hosts file
# $1 is the hostsfile name, $2 is the directory for saving it
echo
echo ADEv1.0-beta hosts file script
echo Copyright 2006, Airolab \(Matthias Scheutz\)
echo

# function for setting OS-dependent default commands
getosdefs () {
  echo -n "Temporary directory [$tdir]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    echo "scratch $tdir" >> $ADEHOSTSNEW
  else
    echo "scratch $INPUT" >> $ADEHOSTSNEW
  fi
  echo -n "Shell command [$shc]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    echo "shell $shc" >> $ADEHOSTSNEW
  else
    echo "shell $INPUT" >> $ADEHOSTSNEW
  fi
  echo -n "Shell arguments [$sha]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    if [ "$sha" != "" ]; then
      echo "shellargs $sha" >> $ADEHOSTSNEW
    fi
  else
    echo "shellargs $INPUT" >> $ADEHOSTSNEW
  fi
  echo -n "Ping command [$pgc]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    echo "ping $pgc" >> $ADEHOSTSNEW
  else
    echo "ping $INPUT" >> $ADEHOSTSNEW
  fi
  echo -n "Ping arguments [$pga]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    if [ "$pga" != "" ]; then
      echo "pingargs $pga" >> $ADEHOSTSNEW
    fi
  else
    echo "pingargs $INPUT" >> $ADEHOSTSNEW
  fi
  echo -n "SSH command [$ssc]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    if [ "$ssc" != "" ]; then
      echo "ssh $ssc" >> $ADEHOSTSNEW
    fi
  else
    echo "ssh $INPUT" >> $ADEHOSTSNEW
  fi
  echo -n "SSH arguments [$ssa]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    if [ "$ssa" != "" ]; then
      echo "sshargs $ssa" >> $ADEHOSTSNEW
    fi
  else
    echo "sshargs $INPUT" >> $ADEHOSTSNEW
  fi
  echo -n "SCP command [$scc]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    if [ "$scc" != "" ]; then
      echo "scp $scc" >> $ADEHOSTSNEW
    fi
  else
    echo "scp $INPUT" >> $ADEHOSTSNEW
  fi
  echo -n "SCP arguments [$sca]: "
  read INPUT
  if [ "$INPUT" == "" ]; then
    if [ "$sca" != "" ]; then
      echo "scpargs $sca" >> $ADEHOSTSNEW
    fi
  else
    echo "scpargs $INPUT" >> $ADEHOSTSNEW
  fi
}

# determine file name
if [ "$1" == "" ]; then
    ADEHOSTS=ade.hosts
else
    ADEHOSTS=$1
fi
if [ "$2" == "" ]; then
    ADEDIR=./config
else
    ADEDIR=$2
fi

ADEHOSTSNEW=$ADEDIR/$ADEHOSTS
echo Collecting information about potential hosts in and ADE system,
echo which will be written to $ADEHOSTSNEW
echo Mandatory information for each host includes: 
echo   - the IP address of the host
echo   - the ADE home directory on the host
echo   - the JAVA home directory and the JAVA binary
echo   - the user login name
echo 
echo "Default entries are indicated in brackets [default]"
echo "To accept the default for an entry, press <return>"
echo '# ADE hosts file $ADEHOSTSNEW
# Automatically generated by make-hostsfile script on ' `date` '
# Default values can be found in the ade.ADEPreferences class
# and the ade.ADEHostInfo.HostDefaultInfo enumeration.
#
# STARTHOST
# ip           IP address or hostname
# os           operating system
# cpus         number of CPUs (default=1)
# cpumhz       CPU speeds (default=850)
# memmb        available memory
# adehome      ADE home directory
# tempdir      temporary directory (e.g., /tmp)
# javadir      Java home directory
# javabin      Java executable
# javacompiler Java compiler
# shell        command-line shell (e.g., /bin/sh)
# shellargs    shell arguments (e.g., -c)
# ping         ping command (e.g., /bin/ping)
# pingargs     ping arguments (e.g., -c 2)
# rsh          remote shell command (e.g., /bin/rsh)
# rshargs      remote shell arguments (e.g., -X -A -n)
# rcp          remote copy command (e.g., /bin/rcp)
# rcpargs      remote copy arguments (e.g., -X -A -n)
# ssh          ssh command (e.g., /bin/ssh)
# sshargs      ssh arguments (e.g., -X)
# scp          remote secure copy command (e.g., /bin/scp)
# scpargs      remote secure copy arguments (e.g., -A -n)
# sshlogin     ssh login username
# ps           process information command (e.g., /bin/ps)
# psargs       process information command (e.g., -f)
# devices      interfaces supported on host
# ENDHOST
#' > $ADEHOSTSNEW
REMOTEHOST="none"
until [ -z "$REMOTEHOST" ];
do
  echo
  echo Enter the IP address of a new ADE host \(e.g., 129.74.25.101\)
  echo "or press <return> to finish:"
  read REMOTEHOST
  if [ -n "$REMOTEHOST" ]; then
    echo STARTHOST >> $ADEHOSTSNEW
    echo "ip $REMOTEHOST" >> $ADEHOSTSNEW
    echo Enter the ADE home directory on $REMOTEHOST:
    read ADEHOMEREMOTE
    echo "adehome $ADEHOMEREMOTE" >> $ADEHOSTSNEW
    echo Enter the path to the java home directory on $REMOTEHOST:
    read JAVAPATHREMOTE
    echo "javadir $JAVAPATHREMOTE" >> $ADEHOSTSNEW
    echo "Is the java binary in [$JAVAPATHREMOTE""bin/java]? (<return> or path)"
    read JAVABINREMOTE
    if [ -z "$JAVABINREMOTE" ]; then
      echo "Using $JAVAPATHREMOTE""bin/java"
      echo "javabin $JAVAPATHREMOTE""bin/java" >> $ADEHOSTSNEW
    else
      echo "javabin $JAVABINREMOTE" >> $ADEHOSTSNEW
    fi
    echo Enter the login name for $REMOTEHOST:
    read LOGINREMOTE
    echo "sshlogin $LOGINREMOTE" >> $ADEHOSTSNEW
    echo
    echo -n "The following items are optional, do you want to enter them [no]? "
    read INPUT
    if [ "$INPUT" != "" ] && [ "$INPUT" != "no" ]; then
      echo
      echo Operating system \(Linux, FreeBSD, Solaris, OSX, Cygwin, WindowsXP\) [Linux]
      read INPUT
      if [ "$INPUT" == "" ]; then
        INPUT="Linux"
      fi
      echo "os $INPUT" >> $ADEHOSTSNEW
		OS=$INPUT
      echo -n "Use the defaults for $INPUT [yes]? "
      read INPUT
      if [ "$INPUT" != "" ] && [ "$INPUT" != "yes" ]; then
# sshlogin     ssh login username
			case $OS in
            Linux)
              tdir="/tmp"
              shc="/bin/sh"
              sha="-c"
              pgc="/bin/ping"
              pga="-c 1 -w 5"
				  # we don't currently use these, so don't bother
              #rsc="/usr/bin/rsh"
              #rsa="-l"
              #rcc="/usr/bin/rcp"
              #rca=""
              #psc="/bin/ps"
              #psa="-f -A"
              ssc="/usr/bin/ssh"
              ssa="-X -A -n"
              scc="/usr/bin/scp"
              sca=""
				  getosdefs;;
            FreeBSD)
              # don't have a FreeBSD box to check these...
              tdir="/tmp"
              shc="/bin/sh"
              sha="-c"
              pgc="/bin/ping"
              pga="-c 1 -w 5"
				  # we don't currently use these, so don't bother
              #rsc="/usr/bin/rsh"
              #rsa="-l"
              #rcc="/usr/bin/rcp"
              #rca=""
              #psc="/bin/ps"
              #psa="-f -A"
              ssc="/usr/bin/ssh"
              ssa="-X -A -n"
              scc="/usr/bin/scp"
              sca=""
				  getosdefs;;
            Solaris)
              tdir="/tmp"
              shc="/bin/sh"
              sha="-c"
              pgc="/usr/sbin/ping"
              pga=""
				  # we don't currently use these, so don't bother
              #rsc="/usr/bin/rsh"
              #rsa="-l"
              #rcc="/usr/bin/rcp"
              #rca=""
              #psc="/bin/ps"
              #psa="-f -A"
              ssc="/usr/bin/ssh"
              ssa="-X -A -n"
              scc="/usr/bin/scp"
              sca=""
				  getosdefs;;
            OSX)
              tdir="/tmp"
              shc="/bin/sh"
              sha="-c"
              pgc="/bin/ping"
              pga="-c 1 -w 5"
				  # we don't currently use these, so don't bother
              #rsc="/usr/bin/rsh"
              #rsa="-l"
              #rcc="/usr/bin/rcp"
              #rca=""
              #psc="/bin/ps"
              #psa="-f -A"
              ssc="/usr/bin/ssh"
              ssa="-X -A -n"
              scc="/usr/bin/scp"
              sca=""
				  getosdefs;;
            Cygwin)
              tdir="/tmp"
              shc="/usr/bin/sh"
              sha="-c"
              pgc="/usr/bin/ping"
              pga="-c 1 -w 5"
				  # we don't currently use these, so don't bother
              #rsc="/usr/bin/rsh"
              #rsa="-l"
              #rcc="/usr/bin/rcp"
              #rca=""
              #psc="/bin/ps"
              #psa="-f -A"
              ssc="/usr/bin/ssh"
              ssa="-X -A -n"
              scc="/usr/bin/scp"
              sca=""
				  getosdefs;;
            WindowsXP)
              echo "Make sure to enter an extra backslash in directory paths"
				  echo "before backslashes (e.g., C:\\\\Program Files\\\\):"
              tdir="C:\\"
              shc="cmd.exe"
              sha="/C"
              pgc="ping.exe"
              pga="-n 1 -w 4000"
				  # we don't currently use these, so don't bother
              #rsc="/usr/bin/rsh"
              #rsa="-l"
              #rcc="/usr/bin/rcp"
              #rca=""
              #psc="tasklist"
              #psa=""
              ssc=""
              ssa=""
              scc=""
              sca=""
				  getosdefs;;
            *) echo Unknown OS;;
         esac
		fi
      echo
      echo -n "Enter additional host information [no]? "
      read INPUT
      if [ "$INPUT" != "" ] && [ "$INPUT" != "no" ]; then
        echo -n "Devices (i.e., interfaces) supported on host [all]: "
        read INPUT
        if [ "$INPUT" != "" ]; then
          echo "devices $INPUT" >> $ADEHOSTSNEW
        fi
        echo -n "Number of CPUs [1]: "
        read INPUT
        if [ "$INPUT" == "" ]; then
          echo "cpus 1" >> $ADEHOSTSNEW
        else
          echo "cpus $INPUT" >> $ADEHOSTSNEW
        fi
        echo -n "CPU speed \(in MHz\) [850]: "
        read INPUT
        if [ "$INPUT" == "" ]; then
          echo "cpumhz 850" >> $ADEHOSTSNEW
        else
          echo "cpumhz $INPUT" >> $ADEHOSTSNEW
        fi
        echo -n "Total available memory [256]: "
        read INPUT
        if [ "$INPUT" == "" ]; then
          echo "memmb 256" >> $ADEHOSTSNEW
        else
          echo "memmb $INPUT" >> $ADEHOSTSNEW
        fi
      fi # additional host info
    fi # optional info
    echo ENDHOST >> $ADEHOSTSNEW
	 echo '# ' >> $ADEHOSTSNEW
  fi # remote host
done
echo Created ADE hosts file $ADEHOSTSNEW
